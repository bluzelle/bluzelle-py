# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

import _bzapi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _bzapi.SHARED_PTR_DISOWN
class response(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bzapi.delete_response

    def set_signal_id(self, signal_id: 'int') -> "int":
        return _bzapi.response_set_signal_id(self, signal_id)

    def get_result(self) -> "std::string":
        return _bzapi.response_get_result(self)

    def get_db(self) -> "std::shared_ptr< bzapi::async_database >":
        return _bzapi.response_get_db(self)

    def get_error(self) -> "int":
        return _bzapi.response_get_error(self)

# Register response in _bzapi:
_bzapi.response_swigregister(response)

class async_database(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, key: 'std::string const &', value: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_create(self, key, value)

    def read(self, key: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_read(self, key)

    def update(self, key: 'std::string const &', value: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_update(self, key, value)

    def remove(self, key: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_remove(self, key)

    def quick_read(self, key: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_quick_read(self, key)

    def has(self, key: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_has(self, key)

    def keys(self) -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_keys(self)

    def size(self) -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_size(self)

    def expire(self, key: 'std::string const &', expiry: 'uint64_t') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_expire(self, key, expiry)

    def persist(self, key: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_persist(self, key)

    def ttl(self, key: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
        return _bzapi.async_database_ttl(self, key)

    def swarm_status(self) -> "std::string":
        return _bzapi.async_database_swarm_status(self)
    __swig_destroy__ = _bzapi.delete_async_database

# Register async_database in _bzapi:
_bzapi.async_database_swigregister(async_database)

class database(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create(self, key: 'std::string const &', value: 'std::string const &') -> "std::string":
        return _bzapi.database_create(self, key, value)

    def read(self, key: 'std::string const &') -> "std::string":
        return _bzapi.database_read(self, key)

    def update(self, key: 'std::string const &', value: 'std::string const &') -> "std::string":
        return _bzapi.database_update(self, key, value)

    def remove(self, key: 'std::string const &') -> "std::string":
        return _bzapi.database_remove(self, key)

    def quick_read(self, key: 'std::string const &') -> "std::string":
        return _bzapi.database_quick_read(self, key)

    def has(self, key: 'std::string const &') -> "std::string":
        return _bzapi.database_has(self, key)

    def keys(self) -> "std::string":
        return _bzapi.database_keys(self)

    def size(self) -> "std::string":
        return _bzapi.database_size(self)

    def expire(self, key: 'std::string const &', expiry: 'uint64_t') -> "std::string":
        return _bzapi.database_expire(self, key, expiry)

    def persist(self, key: 'std::string const &') -> "std::string":
        return _bzapi.database_persist(self, key)

    def ttl(self, key: 'std::string const &') -> "std::string":
        return _bzapi.database_ttl(self, key)

    def swarm_status(self) -> "std::string":
        return _bzapi.database_swarm_status(self)
    __swig_destroy__ = _bzapi.delete_database

# Register database in _bzapi:
_bzapi.database_swigregister(database)


def initialize(public_key: 'std::string const &', private_key: 'std::string const &', endpoint: 'std::string const &', swarm_id: 'std::string const &') -> "bool":
    return _bzapi.initialize(public_key, private_key, endpoint, swarm_id)

def terminate() -> "void":
    return _bzapi.terminate()

def has_db(uuid: 'std::string const &') -> "bool":
    return _bzapi.has_db(uuid)

def create_db(uuid: 'std::string const &') -> "std::shared_ptr< bzapi::database >":
    return _bzapi.create_db(uuid)

def open_db(uuid: 'std::string const &') -> "std::shared_ptr< bzapi::database >":
    return _bzapi.open_db(uuid)

def async_has_db(uuid: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
    return _bzapi.async_has_db(uuid)

def async_create_db(uuid: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
    return _bzapi.async_create_db(uuid)

def async_open_db(uuid: 'std::string const &') -> "std::shared_ptr< bzapi::response >":
    return _bzapi.async_open_db(uuid)

def get_error() -> "int":
    return _bzapi.get_error()

def get_error_str() -> "std::string":
    return _bzapi.get_error_str()
class logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _bzapi.delete_logger

    def log(self, severity: 'std::string const &', message: 'std::string const &') -> "void":
        return _bzapi.logger_log(self, severity, message)

    def __init__(self):
        if self.__class__ == logger:
            _self = None
        else:
            _self = self
        _bzapi.logger_swiginit(self, _bzapi.new_logger(_self, ))
    def __disown__(self):
        self.this.disown()
        _bzapi.disown_logger(self)
        return weakref.proxy(self)

# Register logger in _bzapi:
_bzapi.logger_swigregister(logger)


def set_logger(logger: 'logger') -> "void":
    return _bzapi.set_logger(logger)


